from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel, 
                             QPushButton, QTableWidget, QTableWidgetItem, 
                             QGroupBox, QFormLayout, QComboBox, QProgressBar,
                             QFrame, QHeaderView, QMessageBox, QSplitter,
                             QTextEdit, QScrollArea)
from PyQt6.QtCore import Qt, QTimer, pyqtSignal
from PyQt6.QtGui import QFont, QPixmap, QPainter, QBrush, QColor
from datetime import datetime
import json
from services import ModerationService
from ui.dialogs.moderation_dialog import ModerationDialog

class ModerationPage(QWidget):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –æ–∫–Ω–µ"""
    
    request_processed = pyqtSignal()  # –°–∏–≥–Ω–∞–ª –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏
    
    def __init__(self, user_data, parent=None):
        super().__init__(parent)
        self.user_data = user_data
        self.moderation_service = ModerationService()
        self.current_requests = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if user_data.get('role_id', 1) < 2:
            self.setup_no_access_ui()
            return
        
        self.setup_ui()
        self.load_data()
        
        # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
        self.update_timer = QTimer()
        self.update_timer.timeout.connect(self.load_data)
        self.update_timer.start(60000)
    
    def setup_no_access_ui(self):
        """UI –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        layout = QVBoxLayout(self)
        layout.setAlignment(Qt.AlignmentFlag.AlignCenter)
        
        # –ò–∫–æ–Ω–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        icon_label = QLabel("üîí")
        icon_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        icon_label.setStyleSheet("font-size: 64px; color: #ccc; margin: 20px;")
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ
        message_label = QLabel("–î–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
        message_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        message_label.setFont(QFont("", 16))
        message_label.setStyleSheet("color: #666; margin: 10px;")
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        desc_label = QLabel("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        desc_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        desc_label.setWordWrap(True)
        desc_label.setStyleSheet("color: #999; margin: 10px;")
        
        layout.addWidget(icon_label)
        layout.addWidget(message_label)
        layout.addWidget(desc_label)
        layout.addStretch()
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        header_layout = QHBoxLayout()
        
        title_label = QLabel("–ú–æ–¥–µ—Ä–∞—Ü–∏—è")
        title_font = QFont()
        title_font.setPointSize(18)
        title_font.setBold(True)
        title_label.setFont(title_font)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫
        self.notification_label = QLabel()
        self.notification_label.setStyleSheet("""
            QLabel {
                background-color: #f44336;
                color: white;
                padding: 4px 8px;
                border-radius: 10px;
                font-weight: bold;
                font-size: 12px;
            }
        """)
        self.notification_label.hide()
        
        header_layout.addWidget(title_label)
        header_layout.addWidget(self.notification_label)
        header_layout.addStretch()
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–ª–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        open_moderation_button = QPushButton("–û—Ç–∫—Ä—ã—Ç—å —Å–∏—Å—Ç–µ–º—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
        open_moderation_button.clicked.connect(self.open_moderation_dialog)
        open_moderation_button.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;
                color: white;
                padding: 8px 16px;
                border: none;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
        """)
        
        header_layout.addWidget(open_moderation_button)
        
        layout.addLayout(header_layout)
        
        # –î–∞—à–±–æ—Ä–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.create_dashboard_section(layout)
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏
        self.create_recent_requests_section(layout)
        
        # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        self.create_quick_actions_section(layout)
    
    def create_dashboard_section(self, parent_layout):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞"""
        dashboard_group = QGroupBox("–û–±–∑–æ—Ä")
        dashboard_layout = QVBoxLayout(dashboard_group)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        cards_layout = QHBoxLayout()
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ "–û–∂–∏–¥–∞—é—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è"
        self.pending_card = self.create_stat_card("–û–∂–∏–¥–∞—é—Ç", "0", "#FF9800")
        cards_layout.addWidget(self.pending_card)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è"
        self.today_card = self.create_stat_card("–°–µ–≥–æ–¥–Ω—è", "0", "#4CAF50")
        cards_layout.addWidget(self.today_card)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ "–ó–∞ –Ω–µ–¥–µ–ª—é"
        self.week_card = self.create_stat_card("–ó–∞ –Ω–µ–¥–µ–ª—é", "0", "#2196F3")
        cards_layout.addWidget(self.week_card)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è"
        self.avg_time_card = self.create_stat_card("–°—Ä. –≤—Ä–µ–º—è", "0—á", "#9C27B0")
        cards_layout.addWidget(self.avg_time_card)
        
        dashboard_layout.addLayout(cards_layout)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        self.loading_bar = QProgressBar()
        self.loading_bar.setRange(0, 0)  # Indeterminate progress
        self.loading_bar.hide()
        dashboard_layout.addWidget(self.loading_bar)
        
        parent_layout.addWidget(dashboard_group)
    
    def create_stat_card(self, title, value, color):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        card = QFrame()
        card.setFrameStyle(QFrame.Shape.Box)
        card.setStyleSheet(f"""
            QFrame {{
                border: 2px solid {color};
                border-radius: 8px;
                background-color: white;
                margin: 5px;
                padding: 10px;
            }}
        """)
        
        layout = QVBoxLayout(card)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel(title)
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title_label.setStyleSheet(f"color: {color}; font-weight: bold; font-size: 12px;")
        
        # –ó–Ω–∞—á–µ–Ω–∏–µ
        value_label = QLabel(value)
        value_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        value_label.setStyleSheet("font-size: 24px; font-weight: bold; margin: 5px;")
        
        layout.addWidget(title_label)
        layout.addWidget(value_label)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ label –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        card.value_label = value_label
        
        return card
    
    def create_recent_requests_section(self, parent_layout):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞—è–≤–æ–∫"""
        requests_group = QGroupBox("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏")
        requests_layout = QVBoxLayout(requests_group)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞—è–≤–æ–∫ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        self.requests_table = QTableWidget()
        self.requests_table.setColumnCount(5)
        self.requests_table.setHorizontalHeaderLabels([
            'ID', '–¢–∏–ø', '–û–ø–µ—Ä–∞—Ü–∏—è', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–°—Ç–∞—Ç—É—Å'
        ])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        self.requests_table.setMaximumHeight(200)
        self.requests_table.setAlternatingRowColors(True)
        self.requests_table.setSelectionBehavior(QTableWidget.SelectionBehavior.SelectRows)
        
        header = self.requests_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeMode.ResizeToContents)
        header.setSectionResizeMode(1, QHeaderView.ResizeMode.ResizeToContents)
        header.setSectionResizeMode(2, QHeaderView.ResizeMode.ResizeToContents)
        header.setSectionResizeMode(3, QHeaderView.ResizeMode.Stretch)
        header.setSectionResizeMode(4, QHeaderView.ResizeMode.ResizeToContents)
        
        # –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        self.requests_table.itemDoubleClicked.connect(self.open_moderation_dialog)
        
        requests_layout.addWidget(self.requests_table)
        
        # –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ"
        show_all_layout = QHBoxLayout()
        show_all_layout.addStretch()
        
        show_all_button = QPushButton("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏")
        show_all_button.clicked.connect(self.open_moderation_dialog)
        show_all_button.setStyleSheet("""
            QPushButton {
                color: #2196F3;
                border: none;
                text-decoration: underline;
                background: transparent;
                padding: 5px;
            }
            QPushButton:hover {
                color: #1976D2;
            }
        """)
        
        show_all_layout.addWidget(show_all_button)
        requests_layout.addLayout(show_all_layout)
        
        parent_layout.addWidget(requests_group)
    
    def create_quick_actions_section(self, parent_layout):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        actions_group = QGroupBox("–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
        actions_layout = QHBoxLayout(actions_group)
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫
        pending_button = QPushButton("–û–∂–∏–¥–∞—é—â–∏–µ –∑–∞—è–≤–∫–∏")
        pending_button.setIcon(self.style().standardIcon(self.style().StandardPixmap.SP_MessageBoxQuestion))
        pending_button.clicked.connect(lambda: self.open_moderation_dialog(filter_pending=True))
        
        # –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_button = QPushButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        stats_button.setIcon(self.style().standardIcon(self.style().StandardPixmap.SP_ComputerIcon))
        stats_button.clicked.connect(lambda: self.open_moderation_dialog(show_stats=True))
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        refresh_button = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å")
        refresh_button.setIcon(self.style().standardIcon(self.style().StandardPixmap.SP_BrowserReload))
        refresh_button.clicked.connect(self.load_data)
        
        actions_layout.addWidget(pending_button)
        actions_layout.addWidget(stats_button)
        actions_layout.addWidget(refresh_button)
        actions_layout.addStretch()
        
        parent_layout.addWidget(actions_group)
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        if self.user_data.get('role_id', 1) < 2:
            return
        
        self.loading_bar.show()
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.load_statistics()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏
            self.load_recent_requests()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
        finally:
            self.loading_bar.hide()
    
    def load_statistics(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
            stats = self.moderation_service.get_moderation_statistics(
                admin_id=self.user_data['user_id'],
                period_days=7
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
            self.pending_card.value_label.setText(str(stats.get('pending_requests', 0)))
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
            total_week = stats.get('approved_requests', 0) + stats.get('rejected_requests', 0)
            today_processed = max(0, total_week // 7)  # –ì—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞
            self.today_card.value_label.setText(str(today_processed))
            
            self.week_card.value_label.setText(str(stats.get('total_requests', 0)))
            
            avg_hours = stats.get('avg_processing_hours', 0)
            if avg_hours > 24:
                avg_text = f"{avg_hours/24:.1f}–¥"
            else:
                avg_text = f"{avg_hours:.1f}—á"
            self.avg_time_card.value_label.setText(avg_text)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            pending_count = stats.get('pending_requests', 0)
            if pending_count > 0:
                self.notification_label.setText(f"{pending_count} –Ω–æ–≤—ã—Ö")
                self.notification_label.show()
            else:
                self.notification_label.hide()
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def load_recent_requests(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞—è–≤–æ–∫"""
        try:
            result = self.moderation_service.get_pending_requests(
                moderator_id=self.user_data['user_id'],
                filters={'offset': 0, 'limit': 10}
            )
            
            self.current_requests = result['requests']
            self.populate_requests_table()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫: {e}")
    
    def populate_requests_table(self):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞—è–≤–æ–∫"""
        self.requests_table.setRowCount(len(self.current_requests))
        
        for row, request in enumerate(self.current_requests):
            # ID –∑–∞—è–≤–∫–∏
            self.requests_table.setItem(row, 0, QTableWidgetItem(str(request['request_id'])))
            
            # –¢–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏
            self.requests_table.setItem(row, 1, QTableWidgetItem(request['entity_type']))
            
            # –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
            operation_item = QTableWidgetItem(request['operation_type'])
            if request['operation_type'] == 'CREATE':
                operation_item.setBackground(QColor('#E8F5E8'))
            elif request['operation_type'] == 'UPDATE':
                operation_item.setBackground(QColor('#FFF3E0'))
            elif request['operation_type'] == 'DELETE':
                operation_item.setBackground(QColor('#FFEBEE'))
            
            self.requests_table.setItem(row, 2, operation_item)
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            username = request.get('requester_username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            self.requests_table.setItem(row, 3, QTableWidgetItem(username))
            
            # –°—Ç–∞—Ç—É—Å
            status_item = QTableWidgetItem(request['status'])
            if request['status'] == 'PENDING':
                status_item.setBackground(QColor('#FFF3E0'))
            elif request['status'] == 'APPROVED':
                status_item.setBackground(QColor('#E8F5E8'))
            elif request['status'] == 'REJECTED':
                status_item.setBackground(QColor('#FFEBEE'))
            
            self.requests_table.setItem(row, 4, status_item)
    
    def open_moderation_dialog(self, filter_pending=False, show_stats=False):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        try:
            dialog = ModerationDialog(self.user_data, self)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–∞–ª–æ–≥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if filter_pending:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –Ω–∞ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞—è–≤–∫–∏
                dialog.status_filter.setCurrentText('PENDING')
                dialog.apply_filters()
            elif show_stats and hasattr(dialog, 'tab_widget'):
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                for i in range(dialog.tab_widget.count()):
                    if dialog.tab_widget.tabText(i) == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                        dialog.tab_widget.setCurrentIndex(i)
                        break
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            dialog.request_processed.connect(self.load_data)
            
            dialog.exec()
            
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å–∏—Å—Ç–µ–º—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {str(e)}")
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        if hasattr(self, 'update_timer'):
            self.update_timer.stop()
        event.accept()