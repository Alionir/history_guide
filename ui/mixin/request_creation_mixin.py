# ui/mixins/request_creation_mixin.py
from PyQt6.QtWidgets import *
from PyQt6.QtCore import *

class RequestCreationMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
    
    def add_request_buttons_to_layout(self, layout, entity_type):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ –≤ layout"""
        if self.user_data['role_id'] < 2:  # –¢–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            request_layout = QHBoxLayout()
            
            create_btn = QPushButton(f"–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ")
            create_btn.setStyleSheet("QPushButton { background-color: #d1ecf1; }")
            create_btn.clicked.connect(lambda: self.create_entity_request(entity_type, 'CREATE'))
            request_layout.addWidget(create_btn)
            
            request_layout.addStretch()
            
            help_label = QLabel("üí° –í–∞—à–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏")
            help_label.setStyleSheet("color: #6c757d; font-size: 11px;")
            request_layout.addWidget(help_label)
            
            layout.addLayout(request_layout)
    
    def add_request_context_menu(self, table_widget, entity_type):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é —Å –∑–∞—è–≤–∫–∞–º–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã"""
        if self.user_data['role_id'] < 2:  # –¢–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            table_widget.setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)
            table_widget.customContextMenuRequested.connect(
                lambda pos: self.show_request_context_menu(table_widget, pos, entity_type)
            )
    
    def show_request_context_menu(self, table_widget, pos, entity_type):
        """–ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é —Å –∑–∞—è–≤–∫–∞–º–∏"""
        item = table_widget.itemAt(pos)
        if not item:
            return
        
        menu = QMenu(table_widget)
        
        # –ó–∞—è–≤–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        edit_action = menu.addAction("–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ")
        edit_action.triggered.connect(lambda: self.create_edit_request(table_widget, entity_type))
        
        # –ó–∞—è–≤–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        delete_action = menu.addAction("–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ")
        delete_action.triggered.connect(lambda: self.create_delete_request(table_widget, entity_type))
        
        menu.exec(table_widget.mapToGlobal(pos))
    
    def create_entity_request(self, entity_type, operation_type):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Å—É—â–Ω–æ—Å—Ç—å"""
        dialogs = {
            'PERSON': 'ui.dialogs.person_dialog',
            'COUNTRY': 'ui.dialogs.country_dialog', 
            'EVENT': 'ui.dialogs.event_dialog',
            'DOCUMENT': 'ui.dialogs.document_dialog',
            'SOURCE': 'ui.dialogs.source_dialog'
        }
        
        if entity_type in dialogs:
            try:
                module_name = dialogs[entity_type]
                module = __import__(module_name, fromlist=[''])
                dialog_class = getattr(module, f"{entity_type.title()}Dialog")
                
                dialog = dialog_class(None, self.user_data, self, request_mode=True)
                if dialog.exec() == QDialog.DialogCode.Accepted:
                    QMessageBox.information(
                        self, "–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞", 
                        "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º"
                    )
                    if hasattr(self, 'refresh'):
                        self.refresh()
                        
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É: {str(e)}")
    
    def create_edit_request(self, table_widget, entity_type):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ"""
        selected_items = table_widget.selectedItems()
        if not selected_items:
            return
        
        row = selected_items[0].row()
        entity_id = int(table_widget.item(row, 0).text())  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ ID –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
        
        dialogs = {
            'PERSON': 'ui.dialogs.person_dialog',
            'COUNTRY': 'ui.dialogs.country_dialog',
            'EVENT': 'ui.dialogs.event_dialog', 
            'DOCUMENT': 'ui.dialogs.document_dialog',
            'SOURCE': 'ui.dialogs.source_dialog'
        }
        
        if entity_type in dialogs:
            try:
                module_name = dialogs[entity_type]
                module = __import__(module_name, fromlist=[''])
                dialog_class = getattr(module, f"{entity_type.title()}Dialog")
                
                dialog = dialog_class(entity_id, self.user_data, self, request_mode=True)
                if dialog.exec() == QDialog.DialogCode.Accepted:
                    QMessageBox.information(
                        self, "–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞",
                        "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ"
                    )
                    if hasattr(self, 'refresh'):
                        self.refresh()
                        
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É: {str(e)}")
    
    def create_delete_request(self, table_widget, entity_type):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ"""
        selected_items = table_widget.selectedItems()
        if not selected_items:
            return
        
        row = selected_items[0].row()
        entity_id = int(table_widget.item(row, 0).text())
        entity_name = table_widget.item(row, 1).text() if table_widget.columnCount() > 1 else "—ç–ª–µ–º–µ–Ω—Ç"
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É —É–¥–∞–ª–µ–Ω–∏—è
        reason, ok = QInputDialog.getMultiLineText(
            self, "–ü—Ä–∏—á–∏–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è",
            f"–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —É–¥–∞–ª–µ–Ω–∏—è '{entity_name}':"
        )
        
        if not ok or not reason.strip():
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        reply = QMessageBox.question(
            self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            f"–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ '{entity_name}'?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        
        if reply != QMessageBox.StandardButton.Yes:
            return
        
        try:
            # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
            services = {
                'PERSON': 'PersonService',
                'COUNTRY': 'CountryService',
                'EVENT': 'EventService',
                'DOCUMENT': 'DocumentService', 
                'SOURCE': 'SourceService'
            }
            
            if entity_type in services:
                service_name = services[entity_type]
                service = getattr(self, f"{entity_type.lower()}_service", None)
                
                if service and hasattr(service, 'delete_person_request'):
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
                    method_name = f"delete_{entity_type.lower()}_request"
                    if hasattr(service, method_name):
                        method = getattr(service, method_name)
                        result = method(self.user_data['user_id'], entity_id, reason.strip())
                        
                        if result.get('success'):
                            QMessageBox.information(
                                self, "–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞",
                                "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ"
                            )
                            if hasattr(self, 'refresh'):
                                self.refresh()
                        else:
                            QMessageBox.warning(
                                self, "–û—à–∏–±–∫–∞", 
                                result.get('message', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É')
                            )
                    else:
                        QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                else:
                    QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ: {str(e)}")
    
    def show_moderation_status_indicator(self):
        """–ü–æ–∫–∞–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if self.user_data['role_id'] < 2:
            status_label = QLabel("üìã –í–∞—à–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é")
            status_label.setStyleSheet("""
                QLabel {
                    background-color: #fff3cd;
                    border: 1px solid #ffeaa7;
                    border-radius: 5px;
                    padding: 8px;
                    margin: 5px;
                    color: #856404;
                }
            """)
            return status_label
        return None